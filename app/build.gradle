import com.android.build.gradle.api.ApplicationVariant
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id 'com.android.application'
    id 'com.chaquo.python'
    id 'de.undercouch.download'
}

Directory commonAssetsDirectory = layout.buildDirectory.get().dir("generated/${name}/assets/common")

Directory variantAssetsDirectory(ApplicationVariant variant) {
    return layout.buildDirectory.get().dir("generated/${name}/assets/${variant.dirName}")
}

def downloadAppsBundleTask = tasks.register('downloadAppsBundle', Download) {
    src 'https://github.com/endlessm/kolibri-explore-plugin/releases/latest/download/apps-bundle.zip'
    dest layout.buildDirectory.file("generated/${project.name}/apps-bundle.zip")
    onlyIfModified true
    useETag true
}

def extractAppsBundleTask = tasks.register('extractAppsBundle', Copy) {
    from(zipTree(downloadAppsBundleTask.map { it.outputs.files.singleFile })) {
        eachFile { fcd ->
            fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
        }
        includeEmptyDirs = false
    }
    into layout.projectDirectory.dir('src/main/python/testapp/apps')
}

def downloadCollectionsTask = tasks.register('downloadCollections', Download) {
    src 'https://github.com/endlessm/endless-key-collections/archive/refs/heads/main.zip'
    dest layout.buildDirectory.file("generated/${project.name}/collections.zip")
    onlyIfModified true
    useETag 'all'
}

def extractCollectionsTask = tasks.register('extractCollections', Copy) {
    from(zipTree(downloadCollectionsTask.map { it.outputs.files.singleFile })) {
        include "endless-key-collections-main/json/**"
        eachFile { fcd ->
            fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(2))
        }
        includeEmptyDirs = false
    }
    into layout.projectDirectory.dir('src/main/python/testapp/collections')
}

def cleanAppsBundleTask = tasks.register('cleanAppsBundle', Delete) {
    delete layout.projectDirectory.dir('src/main/python/testapp/apps')
}
def cleanCollectionsTask = tasks.register('cleanCollections', Delete) {
    delete layout.projectDirectory.dir('src/main/python/testapp/collections')
}
tasks.named('clean').configure {
    dependsOn(cleanAppsBundleTask)
    dependsOn(cleanCollectionsTask)
}

android {
    namespace "org.endlessos.testapp"

    compileSdkVersion 31

    defaultConfig {
        applicationId "org.endlessos.testapp"
        minSdkVersion 26
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
        python {
            version "3.9"

            pip {
                install "https://github.com/learningequality/kolibri/releases/download/v0.16.0-beta5/kolibri-0.16.0b5-py2.py3-none-any.whl"
                install "kolibri-explore-plugin==${exploreVersion}"
            }

            pyc {
                pip false
            }

            extractPackages "kolibri", "testapp", "kolibri_explore_plugin"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        managedDevices {
            devices {
                pixel2api30 (com.android.build.api.dsl.ManagedVirtualDevice) {
                    // Use device profiles you typically see in Android Studio.
                    device = "Pixel 2"
                    // Use only API levels 27 and higher.
                    apiLevel = 30
                    // To include Google services, use "google".
                    systemImageSource = "aosp-atd"
                }
            }
        }
    }

    sourceSets {
        main {
            // Add common and per variant generated assets directories
            assets.srcDir(commonAssetsDirectory)
            applicationVariants.all { variant ->
                assets.srcDir(variantAssetsDirectory(variant))
            }
        }
    }

    applicationVariants.all { variant ->
        def welcomeScreenTask = createWelcomeScreenTask(variant)
        variant.mergeAssetsProvider.configure {
            dependsOn(welcomeScreenTask)
        }
    }
}

project.afterEvaluate {
    project.afterEvaluate {
        tasks.named('extractPythonBuildPackages').configure {
            inputs.files(extractAppsBundleTask.map { it.outputs.files })
            inputs.files(extractCollectionsTask.map { it.outputs.files })
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.core:core-ktx:1.3.2'
}

tasks.withType(JavaCompile).configureEach {
    options.deprecation = true
}

TaskProvider createWelcomeScreenTask(ApplicationVariant variant) {
    def taskVariant = variant.name.capitalize()
    def dstDir = variantAssetsDirectory(variant).dir('welcomeScreen')
    return tasks.register("generate${taskVariant}WelcomeScreenAssets", Sync) {
        def reqsTask = tasks.named("generate${taskVariant}PythonRequirements").get()
        def srcDir = new File(reqsTask.outputFiles.dir, 'common/kolibri_explore_plugin/welcomeScreen')
        from srcDir
        into dstDir
        dependsOn(reqsTask)
    }
}
