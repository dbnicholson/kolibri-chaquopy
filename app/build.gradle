import com.android.build.gradle.api.ApplicationVariant
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id 'com.android.application'
    id 'com.chaquo.python'
}

Directory commonAssetsDirectory = layout.buildDirectory.get().dir("generated/${name}/assets/common")

Directory variantAssetsDirectory(ApplicationVariant variant) {
    return layout.buildDirectory.get().dir("generated/${name}/assets/${variant.dirName}")
}

String getUrlEtag(URL url) {
    def conn = url.openConnection()
    conn.method = 'HEAD'
    conn.instanceFollowRedirects = true
    conn.connect()
    if (conn.responseCode != 200) {
        throw new Exception("Retrieving ${url} failed: ${conn.responseCode} ${conn.responseMessage}")
    }
    return conn.getHeaderField("ETag")
}

def downloadAppsBundleTask = tasks.register('downloadAppsBundle') {
    def url = new URL('https://github.com/endlessm/kolibri-explore-plugin/releases/latest/download/apps-bundle.zip')
    def dest = layout.buildDirectory.get()
        .file("generated/${project.name}/apps-bundle.zip")
        .asFile

    inputs.property('url', "${url}")
    inputs.property('etag', getUrlEtag(url))
    outputs.file(dest)

    doLast {
        println 'Downloading apps-bundle.zip'
        def conn = url.openConnection()
        conn.instanceFollowRedirects = true
        conn.connect()
        def urlStream = conn.getInputStream()
        def destStream = new FileOutputStream(dest)
        urlStream.transferTo(destStream)
        destStream.close()
        urlStream.close()
    }
}

def extractAppsBundleTask = tasks.register('extractAppsBundle', Copy) {
    from(zipTree(downloadAppsBundleTask.map { it.outputs.files.singleFile })) {
        eachFile { fcd ->
            fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
        }
        includeEmptyDirs = false
    }
    into layout.projectDirectory.dir('src/main/python/testapp/apps')
}

String getLatestExplorePluginVersion() {
    def url = new URL('https://pypi.org/simple/kolibri-explore-plugin/')
    def conn = url.openConnection()
    conn.instanceFollowRedirects = true
    conn.setRequestProperty('Accept', 'application/vnd.pypi.simple.v1+json')
    conn.connect()
    def urlStream = conn.getInputStream()
    def slurper = new JsonSlurper()
    def details = slurper.parse(urlStream)
    urlStream.close()
    return details.versions.last()
}

def generateExploreVersionTask = tasks.register('generateExploreVersion') {
    def version = getLatestExplorePluginVersion()
    def dest = layout.buildDirectory.get()
        .file("generated/${project.name}/explore-version.json")
        .asFile

    inputs.property('version', version)
    outputs.file(dest)

    doLast {
        dest.text = JsonOutput.toJson([version: version])
    }
}

def cleanAppsBundleTask = tasks.register('cleanAppsBundle', Delete) {
    delete layout.projectDirectory.dir('src/main/python/testapp/apps')
}
tasks.named('clean').configure {
    dependsOn(cleanAppsBundleTask)
}

android {
    namespace "org.endlessos.testapp"

    compileSdkVersion 31

    defaultConfig {
        applicationId "org.endlessos.testapp"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
        python {
            version "3.9"

            pip {
                install "https://github.com/learningequality/kolibri/releases/download/v0.16.0-beta0/kolibri-0.16.0b0-py2.py3-none-any.whl"
                install "kolibri-explore-plugin"
            }

            pyc {
                pip false
            }

            extractPackages "kolibri", "testapp"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        managedDevices {
            devices {
                pixel2api30 (com.android.build.api.dsl.ManagedVirtualDevice) {
                    // Use device profiles you typically see in Android Studio.
                    device = "Pixel 2"
                    // Use only API levels 27 and higher.
                    apiLevel = 30
                    // To include Google services, use "google".
                    systemImageSource = "aosp-atd"
                }
            }
        }
    }

    sourceSets {
        main {
            // Add common and per variant generated assets directories
            assets.srcDir(commonAssetsDirectory)
            applicationVariants.all { variant ->
                assets.srcDir(variantAssetsDirectory(variant))
            }
        }
    }

    applicationVariants.all { variant ->
        def welcomeScreenTask = createWelcomeScreenTask(variant)
        variant.mergeAssetsProvider.configure {
            dependsOn(welcomeScreenTask)
        }
    }
}

project.afterEvaluate {
    project.afterEvaluate {
        tasks.named('extractPythonBuildPackages').configure {
            inputs.files(extractAppsBundleTask.map { it.outputs.files })
        }

        project.android.applicationVariants.all { variant ->
            def taskVariant = variant.name.capitalize()
            def reqsTask = tasks.named("generate${taskVariant}PythonRequirements")
            reqsTask.configure {
                inputs.files(generateExploreVersionTask.map { it.outputs.files })
            }
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.core:core-ktx:1.3.2'
}

TaskProvider createWelcomeScreenTask(ApplicationVariant variant) {
    def taskVariant = variant.name.capitalize()
    def dstDir = variantAssetsDirectory(variant).dir('welcomeScreen')
    return tasks.register("generate${taskVariant}WelcomeScreenAssets", Sync) {
        def reqsTask = tasks.named("generate${taskVariant}PythonRequirements").get()
        def srcDir = new File(reqsTask.ext.destinationDir, 'common/kolibri_explore_plugin/welcomeScreen')
        from srcDir
        into dstDir
        dependsOn(reqsTask)
    }
}
